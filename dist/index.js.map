{"version":3,"sources":["../src/index.ts"],"names":["CdkUtil","app","command","args","aws","SdkProvider","withAwsCliCompatibleDefaults","ec2creds","configuration","Configuration","load","provisioner","CloudFormationDeploymentTarget","appStacks","AppStacks","verbose","ignoreErrors","strict","synthesizer","synth","toolkitStackName","settings","get","DEFAULT_TOOLKIT_STACK_NAME","colors","bold","STACKS","ENVIRONMENTS","cli","CdkToolkit","diff","stackNames","exclusively","templatePath","template","contextLines","fail","context","cxapi","ENABLE_DIFF_NO_FAIL","parameterMap","parameter","parameters","keyValue","split","deploy","roleArn","notificationArns","requireApproval","RequireApproval","Never","reuseAssets","tags","sdk","execute","force","destroy","language","list","TEMPLATE","undefined","generateOnly","version","DISPLAY_VERSION","Error"],"mappings":"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","sourcesContent":["import * as cxapi from \"@aws-cdk/cx-api\";\nimport * as colors from \"colors/safe\";\n\nimport { SdkProvider } from \"aws-cdk/lib/api/aws-auth\";\nimport { AppStacks } from \"aws-cdk/lib/api/cxapp/stacks\";\nimport { CloudFormationDeploymentTarget, DEFAULT_TOOLKIT_STACK_NAME } from \"aws-cdk/lib/api/deployment-target\";\nimport { CdkToolkit } from \"aws-cdk/lib/cdk-toolkit\";\nimport { cliInit, printAvailableTemplates } from \"aws-cdk/lib/init\";\nimport { data, print } from \"aws-cdk/lib/logging\";\nimport { Configuration } from \"aws-cdk/lib/settings\";\nimport * as version from \"aws-cdk/lib/version\";\nimport { RequireApproval } from \"aws-cdk/lib/diff\";\n\nexport async function CdkUtil(app: any, command: string, args: any): Promise<number | string | {} | void> {\n  const aws = await SdkProvider.withAwsCliCompatibleDefaults({ ec2creds: true });\n\n  const configuration = new Configuration({});\n  await configuration.load();\n\n  const provisioner = new CloudFormationDeploymentTarget({ aws });\n\n  const appStacks = new AppStacks({\n    verbose: false,\n    ignoreErrors: false,\n    strict: false,\n    configuration,\n    aws,\n    synthesizer: async () => app.synth(),\n  });\n\n  const toolkitStackName: string = configuration.settings.get([\"toolkitStackName\"]) || DEFAULT_TOOLKIT_STACK_NAME;\n\n  if (toolkitStackName !== DEFAULT_TOOLKIT_STACK_NAME) {\n    print(`Toolkit stack: ${colors.bold(toolkitStackName)}`);\n  }\n\n  args.STACKS = args.STACKS || [];\n  args.ENVIRONMENTS = args.ENVIRONMENTS || [];\n\n  const cli = new CdkToolkit({ appStacks, provisioner });\n\n  switch (command) {\n    case \"diff\":\n      return await cli.diff({\n        stackNames: args.STACKS,\n        exclusively: args.exclusively,\n        templatePath: args.template,\n        strict: args.strict,\n        contextLines: args.contextLines,\n        fail: args.fail || !configuration.context.get(cxapi.ENABLE_DIFF_NO_FAIL),\n      });\n\n    case \"deploy\":\n      const parameterMap: { [name: string]: string | undefined } = {};\n      for (const parameter of args.parameters) {\n        if (typeof parameter === \"string\") {\n          const keyValue = (parameter as string).split(\"=\", 2);\n          parameterMap[keyValue[0]] = keyValue[1];\n        }\n      }\n      return await cli.deploy({\n        stackNames: args.STACKS,\n        exclusively: args.exclusively,\n        toolkitStackName,\n        roleArn: args.roleArn,\n        notificationArns: args.notificationArns,\n        requireApproval: RequireApproval.Never,\n        reuseAssets: args[\"build-exclude\"],\n        tags: configuration.settings.get([\"tags\"]),\n        sdk: aws,\n        execute: args.execute,\n        force: args.force,\n        parameters: parameterMap,\n      });\n\n    case \"destroy\":\n      return await cli.destroy({\n        stackNames: args.STACKS,\n        exclusively: args.exclusively,\n        force: args.force,\n        roleArn: args.roleArn,\n        sdk: aws,\n      });\n\n    case \"init\":\n      const language = configuration.settings.get([\"language\"]);\n      if (args.list) {\n        return await printAvailableTemplates(language);\n      } else {\n        return await cliInit(args.TEMPLATE, language, undefined, args.generateOnly);\n      }\n    case \"version\":\n      return data(version.DISPLAY_VERSION);\n\n    default:\n      throw new Error(\"Unknown command: \" + command);\n  }\n}\n\nexport default CdkUtil;\n"],"file":"index.js"}